{
  "hash": "8e52e6623593d86fd0408f411c658055",
  "result": {
    "engine": "knitr",
    "markdown": "# Symbology\n\n## Introduction\n\nShapefiles (@sec-shapefiles) are a standard format for storing geographic data. \n\nShapefiles generally come in three types: points <span style=\"color:red\">●</span>; lines <span style=\"color:red;font-size:2em\">━</span>; and polygons <span style=\"color:red;font-size:3em\">▭▯</span>. \n\n# Symbology\n\n*Symbology* is the idea of using shapefile attributes to encode *quantitative (continuous)* or *qualitative (discrete; categorical)* information, such as income or program participation.\n\n::: {.panel-tabset}\n\n## Symbology\n\n| Shapefile Type | Symbology|\n|-----------|--------------------|\n| Points    | Size: ● <span style=\"font-size:2em\">●</span> <span style=\"font-size:3em\">●</span>|  \n|           | Discrete Color: <span style=\"color:red\">●</span> <span style=\"color:blue\">●</span> <span style=\"color:green\">●</span>|\n|           | Continuous Color: <span style=\"color:#deebf7\">●</span> <span style=\"color:#9ecae1\n\">●</span> <span style=\"color:#3182bd\">●</span>|\n| Lines     | Width: ━ <span style=\"font-size:2em\">━</span> <span style=\"font-size:5em\">━</span>|\n|           | Discrete Color: <span style=\"color:red;font-size:3em\">━</span> <span style=\"color:blue;font-size:3em\">━</span> <span style=\"color:green;font-size:3em\">━</span> |\n|           | Continuous Color: <span style=\"color:#deebf7;font-size:3em\">━</span> <span style=\"color:#9ecae1;font-size:3em\">━</span> <span style=\"color:#3182bd;font-size:3em\">━</span> |\n|           | Pattern: <span style=\"font-size:3em\">━ ┅</span> | \n| Polygons  | Discrete Color: <span style=\"color:red;font-size:3em\">■</span> <span style=\"color:blue;font-size:3em\">■</span> <span style=\"color:green;font-size:3em\">■</span> |\n|           | Continuous Color: <span style=\"color:#deebf7;font-size:3em\">■</span> <span style=\"color:#9ecae1;font-size:3em\">■</span> <span style=\"color:#3182bd;font-size:3em\">■</span>|\n|           | Pattern: <span style=\"font-size:3em\">■ ▤ ▦</span>\n\n: Symbology\n\n\n## A Note About the Use of Color\n\nColor palettes can be either qualitative (discrete; categorical) or quantitative (continuous) in nature. \n\n::: {.callout-note}\nThe code used to generate these color palettes is shown for reference, but may not be the exact code needed when these colors are used in maps.\n:::\n\n\n### Base R\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nbarplot(rep(1,10), col = heat.colors(10), axes = FALSE)\n```\n\n::: {.cell-output-display}\n![Heatmap Colors](symbology_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nbarplot(rep(1,10), col = topo.colors(10), axes = FALSE)\n```\n\n::: {.cell-output-display}\n![Topographical Colors](symbology_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nbarplot(rep(1,10), col = terrain.colors(10), axes = FALSE)\n```\n\n::: {.cell-output-display}\n![Terrain Colors](symbology_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n### RColorBrewer\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(RColorBrewer) # A library for color palettes\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndisplay.brewer.pal(name = \"Blues\", n = 9)\n```\n\n::: {.cell-output-display}\n![Blues Palette](symbology_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndisplay.brewer.pal(name = \"Spectral\", n = 9)\n```\n\n::: {.cell-output-display}\n![Spectral Palette](symbology_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\ndisplay.brewer.pal(name = \"Set1\", n = 9)\n```\n\n::: {.cell-output-display}\n![Set1 Palette](symbology_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n\n\n### Viridis\n\nMore details can be found at [https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(scales)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nshow_col(viridis_pal()(9), \n         ncol = 9, # 9 columns\n         labels = FALSE) # no labels \n```\n\n::: {.cell-output-display}\n![Viridis Palette](symbology_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n\n\n\n:::\n\n# Demonstration Map\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(ggplot2) # graphing and mapping\n\nlibrary(sf) # simple features\n\ncity_boundary <- read_sf(\"./shapefiles/AA_City_Boundary/AA_City_Boundary.shp\")\n\nclients <- read_sf(\"./shapefiles/clients/clients.shp\")\n\nggplot(city_boundary) +\n  geom_sf(color = \"darkgrey\", alpha = .5) +\n  geom_sf(data = clients,\n          aes(color = program), # color = program\n          size = 3, # size\n          alpha = .75) + # transparency\n  labs(title = \"Ann Arbor\",\n       subtitle = \"Locations of Simulated Clients\",\n       caption = \"Point Color Indicates Program\") +\n  scale_color_viridis_d(name=\"Program\") + # nice viridis colors\n  theme_minimal() +\n  theme(plot.title = element_text(size = rel(2)), \n        axis.text = element_text(size = rel(.5)),\n        legend.position = \"bottom\") \n```\n\n::: {.cell-output-display}\n![](symbology_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "symbology_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}