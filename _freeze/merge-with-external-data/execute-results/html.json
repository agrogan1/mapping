{
  "hash": "4f5491148a7991f4e50256b8c40acb71",
  "result": {
    "engine": "knitr",
    "markdown": "# Merge Shapefiles With External Data {#sec-merging}\n\n## Introduction\n\nA common task in mapping is that we have a *shapefile* (@sec-shapefiles) or `sf` object (@sec-sf) of map data, but we want to merge in some *external data* from another source so that we can map that *external data*.\n\nOften we want to use different colors to map that external data (@sec-symbology).\n\nHere, I use an `sf` object (@sec-sf) of countries of the world (@sec-rnaturalearth), and merge that data with data from the World Bank World Development Indicators (@sec-WDI).\n\nThis tutorial builds upon another tutorial on Mapping with `ggplot`(@sec-ggplot-map)\n\n## Call Libraries\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(rnaturalearth) # natural earth data\n\nlibrary(sf) # simple (spatial) features\n\nlibrary(ggplot2) # beautiful plots\n\nlibrary(dplyr) # data wrangling and joins\n```\n:::\n\n\n\n\n## Get Map Data on Countries of the World\n\nI am using the `rnaturalearth` package to get map data on countries of the world. I read this data into an object called `world`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nmapdata <- ne_countries(scale = \"medium\", # medium scale\n                        returnclass = \"sf\") # as sf object\n```\n:::\n\n\n\n\n## Make a Map Without Data\n\nI map the data with `ggplot`, and the special `geom`, `geom_sf`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(mapdata) + \n  geom_sf() +\n  labs(title = \"Demonstration Map With No Data\")\n```\n\n::: {.cell-output-display}\n![](merge-with-external-data_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n\n## Get External Data\n\nHere I load the World Bank Data (@sec-WDI).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nload(\"WorldBankData.Rdata\")\n\nhead(WorldBankData) # replay data set\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      country iso2c iso3c year status lastupdated Gini      GDP\n1                 Afghanistan    AF   AFG 2023         2024-10-24   NA       NA\n2 Africa Eastern and Southern    ZH   AFE 2023         2024-10-24   NA 1672.506\n3  Africa Western and Central    ZI   AFW 2023         2024-10-24   NA 1584.333\n4                     Albania    AL   ALB 2023         2024-10-24   NA 8367.776\n5                     Algeria    DZ   DZA 2023         2024-10-24   NA 5260.206\n6              American Samoa    AS   ASM 2023         2024-10-24   NA       NA\n  adult_literacy life_expectancy population undernourishment\n1             NA              NA   42239854               NA\n2       73.27511              NA  739108306               NA\n3       60.50555              NA  502789511               NA\n4             NA              NA    2745972               NA\n5             NA              NA   45606480               NA\n6             NA              NA      43914               NA\n                      region   capital longitude latitude              income\n1                 South Asia     Kabul   69.1761  34.5228          Low income\n2                 Aggregates                                       Aggregates\n3                 Aggregates                                       Aggregates\n4      Europe & Central Asia    Tirane   19.8172  41.3317 Upper middle income\n5 Middle East & North Africa   Algiers   3.05097  36.7397 Lower middle income\n6        East Asia & Pacific Pago Pago  -170.691 -14.2846 Upper middle income\n         lending\n1            IDA\n2     Aggregates\n3     Aggregates\n4           IBRD\n5           IBRD\n6 Not classified\n```\n\n\n:::\n:::\n\n\n\n\n## Join Data to Shapefile\n\nI use `left_join` from the `dplyr` package to merge the spatial data in `world` with `externaldata`. \n\n`left_join` is a function that keeps all observations in the data on the left (the shapefile), and only those matching observations in the data on the right (the external data), which is usually what I want in mapping.\n\nI need a unique identifier for my rows of data, so here I use `iso_a3`, a unique 3 letter identifier for countries of the world.\n\nFirst I need to make a copy of a variable in `WorldBankData` with a new name so that the identifiers will match exactly.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nWorldBankData$iso_a3 <- WorldBankData$iso3c \n```\n:::\n\n\n\n\nThen I merge the data using `left_join`.\n \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nnewdata <- left_join(mapdata, # map data\n                     WorldBankData, # table of indicators\n                     by = \"iso_a3\") # join by\n```\n:::\n\n\n\n\n## Make a Map With The Data\n\nOnce I have the merged data, it is easy to map it with `ggplot` and `geom_sf`. Note that I need to specify an `aes`thetic for `geom_sf`. Here `GDP` is the *fill* color for countries on the map.\n\n> Data could also be mapped with another package like `leaflet` (@sec-leaflet).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(newdata) +\n  geom_sf(aes(fill = GDP)) + # adding a fill aesthetic\n  scale_fill_viridis_c(na.value = \"grey97\", # value for NA\n                       option = \"viridis\") + # viridis colors\n  labs(title = \"Demonstration Map With Merged Data\") +\n  theme_minimal() # better theme\n```\n\n::: {.cell-output-display}\n![](merge-with-external-data_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "merge-with-external-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}