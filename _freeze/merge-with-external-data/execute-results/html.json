{
  "hash": "4ee5bcc81ca7436325e27bab0ecbe3f3",
  "result": {
    "engine": "knitr",
    "markdown": "# Merge Shapefiles With External Data\n\n## Introduction\n\nA common task in mapping is that we have a shapefile of map data, but we want to merge in some external data from another source so that we can map that external data. Usually we want to use different colors to map that external data.\n\nHere, I use a shapefile of countries of the world, and map it with some *made up data* of *arbitrary and made up x values* for certain countries.\n\nThis tutorial builds upon another tutorial on Mapping with `ggplot`(@sec-ggplot-map)\n\n## Call Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(sf) # simple (spatial) features\n\nlibrary(ggplot2) # beautiful plots\n\nlibrary(dplyr) # data wrangling and joins\n\nlibrary(tibble) # library for updated dataframes\n\nlibrary(readr) # read CSV files\n\nlibrary(countrycode) # work with country data\n```\n:::\n\n\n## Get Shapefile\n\nHere I am using the `wrld_simpl` dataset of country outlines that is available in several R packages. I read this data into an object called `world`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nworld <- read_sf(\"./shapefiles/wrld_simpl/wrld_simpl.shp\")\n```\n:::\n\n\n## Make a Map Without Data\n\nI map the data with `ggplot`, and the special `geom`, `geom_sf`.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(world) + \n  geom_sf() +\n  labs(title = \"Demonstration Map With No Data\")\n```\n\n::: {.cell-output-display}\n![](merge-with-external-data_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Get External Data\n\nHere I read in a completely made up data set of arbitrary values. The file that I am reading in is a `csv` file, but could be [a file in any number of formats](https://agrogan1.github.io/myposts/you-have-to-get-your-data-from-somewhere.html).\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nexternaldata <- read_csv(\"./external-data/externaldata.csv\")\n\nexternaldata # replay data set\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 Ã— 3\n  ISO3  arbitrary_x name     \n  <chr>       <dbl> <chr>    \n1 COL            10 Colombia \n2 CHL             9 Chile    \n3 ARG             8 Argentina\n4 GHA             7 Ghana    \n5 MLI             6 Mali     \n6 AUS             5 Australia\n```\n\n\n:::\n:::\n\n\n## Join Data to Shapefile\n\nI use `left_join` from the `dplyr` package to merge the spatial data in `world` with `externaldata`. \n\n`left_join` is a function that keeps all observations in the data on the left (the shapefile), and only those matching observations in the data on the right (the external data), which is usually what I want in mapping.\n\nI need a unique identifier for my rows of data, so here I use `ISO3`, a unique 3 letter identifier for countries of the world.\n \n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nnewdata <- left_join(world, externaldata, by = \"ISO3\")\n```\n:::\n\n\n## Make a Map With The Data\n\nOnce I have the merged data, it is easy to map it with `ggplot` and `geom_sf`. Note that I need to specify an `aes`thetic for `geom_sf`. Here `arbitrary_x` is the *fill* color for countries on the map.\n\n> Data could also be mapped with another package like `leaflet` (@sec-leaflet).\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nggplot(newdata) +\n  geom_sf(aes(fill = arbitrary_x)) + # adding a fill aesthetic\n  scale_fill_viridis_c(na.value = \"grey97\", # value for NA\n                       option = \"turbo\") + # viridis colors\n  labs(title = \"Demonstration Map With Merged Data\") +\n  theme_minimal() # better theme\n```\n\n::: {.cell-output-display}\n![](merge-with-external-data_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "merge-with-external-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}