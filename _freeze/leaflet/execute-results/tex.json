{
  "hash": "5126a9d7512ba50905eea7c68fb21380",
  "result": {
    "engine": "knitr",
    "markdown": "# Mapping With `leaflet` {#sec-leaflet}\n\n## Call Libraries \n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(leaflet) # web based maps\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'leaflet' was built under R version 4.4.2\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(sf) # simple (spatial) features\n\nlibrary(readr) # import csv\n\nlibrary(dplyr) # data wrangling\n\nlibrary(here) # where am I?\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: package 'here' was built under R version 4.4.2\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nlibrary(pander) # nice tables\n\n# setwd(here()) # set the working directory\n```\n:::\n\n\n\n## Get Simulated Client Data\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nclients <- read_csv(\"./location-data/clients.csv\")\n\npander(head(clients)) # top of client data\n```\n\n::: {.cell-output-display}\n\n--------------------------------------------------------------------\n  ID    age   gender    race_ethnicity    family_income    program  \n------ ----- -------- ------------------ --------------- -----------\n 2892   23     Male    African American       42359       Program B \n\n 1971   39    Female    Asian American        66500       Program C \n\n 4728   26    Female    Asian American        52726       Program C \n\n 1020   24     Male         Latinx            52911       Program D \n\n 4429   36    Female    Asian American        50287       Program C \n\n 3136   33     Male    African American       45570       Program C \n--------------------------------------------------------------------\n\nTable: Table continues below\n\n \n------------------------------------------------------------\n mental_health_T1   mental_health_T2   latitude   longitude \n------------------ ------------------ ---------- -----------\n      95.25              106.8          42.16       -83.6   \n\n      82.64               96.3          42.29      -83.88   \n\n      80.49              98.72          42.14      -83.78   \n\n      93.82              91.67          42.24      -83.68   \n\n      83.37              99.69          42.18      -83.64   \n\n      75.28               92.9          42.21       -83.7   \n------------------------------------------------------------\n\n\n:::\n:::\n\n\n\n## Only Clients In Ann Arbor Area\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nclients <- clients %>% \n  filter(latitude <= 42.35 &\n           latitude >= 42.2 &\n           longitude >= -83.8 &\n           longitude <= -83.65)\n```\n:::\n\n\n\n## Read in Shapefiles\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nparks <- read_sf(\"./shapefiles/AA_Parks/AA_Parks.shp\")\n\nuniversity <- read_sf(\"./shapefiles/AA_University/AA_University.shp\")\n\ncity_boundary <- read_sf(\"./shapefiles/AA_City_Boundary/AA_City_Boundary.shp\")\n```\n:::\n\n\n\n# Transform CRS\n\n> \"Map projections try to portray the surface of the earth or a portion of the earth on a flat piece of paper or computer screen. A coordinate reference system (CRS) then defines, with the help of coordinates, how the two-dimensional, projected map in your GIS is related to real places on the earth. The decision as to which map projection and coordinate reference system to use, depends on the regional extent of the area you want to work in, on the analysis you want to do and often on the availability of data.\" From [qgis.org](https://docs.qgis.org/2.8/en/docs/gentle_gis_introduction/coordinate_reference_systems.html)\n\n\n> see [https://stackoverflow.com/questions/66471147/how-to-plot-sp-object-as-sf-in-r-leaflet](https://stackoverflow.com/questions/66471147/how-to-plot-sp-object-as-sf-in-r-leaflet)\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nuniversity <- st_transform(university, 4326) # transform CRS\n\nparks <- st_transform(parks, 4326) # transform CRS\n\ncity_boundary <- st_transform(city_boundary, 4326) # transform CRS\n```\n:::\n\n\n\n## Leaflet Map\n\n### Color Palette\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\npal <- colorFactor(c(\"red\", \"blue\", \"orange\", \"green\"), \n                   domain = levels(as.factor(clients$program)))\n```\n:::\n\n\n\n### Map\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\" code-summary=\"Show the code\"}\nleaflet(clients) %>%\n  setView(lng = mean(clients$longitude), \n          lat = mean(clients$latitude), \n          zoom = 12) %>% \n  # addTiles() %>% # Open StreetMap\n  addProviderTiles(providers$CartoDB.Positron) %>%\n  addCircleMarkers(~longitude, \n             ~latitude, \n             popup = ~paste(\"Client ID:\", as.character(ID)), \n             label = ~paste(\"Client ID:\", as.character(ID)),\n             color = ~pal(program),\n             clusterOptions = markerClusterOptions()) %>%\n  addLegend(\"bottomright\", \n            pal = pal, \n            values = ~program,\n            title = \"Program\") %>%\n  # addPolygons(data = parks, color = \"green\") %>%\n  # addPolygons(data = university, color = \"blue\") %>%\n  addPolygons(data = city_boundary, \n              color = \"red\",\n              fillOpacity = 0.0)\n```\n\n::: {.cell-output-display}\n![](leaflet_files/figure-pdf/unnamed-chunk-7-1.pdf){fig-pos='H'}\n:::\n:::\n",
    "supporting": [
      "leaflet_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}