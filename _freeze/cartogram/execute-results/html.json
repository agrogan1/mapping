{
  "hash": "130ab7d461637344f0a0f14f57270eb2",
  "result": {
    "engine": "knitr",
    "markdown": "# Cartogram\n\nA *cartogram* is a map where the areas of different regions are distorted (increased in size; decreased in size) by the value of some quantitative variable.\n\n## Call Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(rnaturalearth) # natural earth data\n\nlibrary(ggplot2) # beautiful maps\n\nlibrary(dplyr) # data wrangling\n\nlibrary(sf) # simple (spatial) features\n\nlibrary(cartogram) # cartograms!\n```\n:::\n\n\n## Remove Scientific Notation\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\noptions(scipen = 999) # high 'penalty' for scientific notation\n```\n:::\n\n\n## Get Map Data From `rnaturalearth`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmapdata <- ne_countries(scale = \"medium\", # medium scale\n                        returnclass = \"sf\")  # as sf object\n```\n:::\n\n\n## Make A Basic Map\n\nWe make a basic map, reading it into an object called `mymap.` We then *replay* `mymap.`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmymap <- ggplot(mapdata) + # the data I am mapping\n  geom_sf() # the geometry I am using\n\nmymap # replay my map\n```\n\n::: {.cell-output-display}\n![](cartogram_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n## Make And Plot The Cartogram\n\n### Project The Cartogram Data\n\n::: {.callout-tip}\n`cartogram` requires *projected* data (@sec-projections), so we need to project the data with `st_transform`. A number of projections, including the *Mercator* and *Mollweide* projections are possibilities. You may need to experiment with a number of projections to see which ones work best in any particular cartogram.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmapdata_proj <- st_transform(mapdata,\n                             3857) # Mercator\n\n# mapdata_proj <- st_transform(mapdata, \n#                              crs = \"+proj=moll\") # Mollweide\n```\n:::\n\n\n### Plot The Projected Data\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(mapdata_proj) + \n  geom_sf() # plot projected data\n```\n\n::: {.cell-output-display}\n![](cartogram_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip}\n### Why Does Antarctica Look So Strange? How To Fix This?\n\nIn some projections, especially the *Mercator* projection, Antartica looks strange.\n\nThe key is to run this `dplyr` code to remove Antarctica.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmapdata_proj <- mapdata_proj %>% \n  dplyr::filter(! continent == \"Antarctica\")\n\nggplot(mapdata_proj) + \n  geom_sf() # plot projected data\n```\n\n::: {.cell-output-display}\n![](cartogram_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n:::\n\n### Make The Cartogram Data\n\n::: {.callout-tip}\nEach iteration takes a **LONG** time. Fewer iterations help the time, but each iteration contributes to the *distortion*, and makes a more `cartogram`-like *cartogram*. Because this is the most time intensive step, I time the creation of the cartogram with `Sys.time`.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nstart_time <- Sys.time() # time this step\n\nmapdata_cartogram <- cartogram_cont(mapdata_proj, \n                                  \"pop_est\", \n                                  itermax = 7)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in cartogram_cont.sf(mapdata_proj, \"pop_est\", itermax = 7): NA not\nallowed in weight vector. Features will be removed from Shape.\n```\n\n\n:::\n\n```{.r .cell-code  code-fold=\"true\"}\nend_time <- Sys.time()\n\nend_time - start_time\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nTime difference of 2.128004 mins\n```\n\n\n:::\n:::\n\n\n### Basic Cartogram\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(mapdata_cartogram) + \n  geom_sf()\n```\n\n::: {.cell-output-display}\n![](cartogram_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n### Basic Cartogram With `fill` Color\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(mapdata_cartogram) + \n  geom_sf(aes(fill = pop_est)) + # fill is population estimate\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](cartogram_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### Cartogram With Better (`viridis`) Colors\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nggplot(mapdata_cartogram) + \n  geom_sf(aes(fill = pop_est)) + # fill is population estimate\n  scale_fill_viridis_c(name = \"population\",\n                       option = \"turbo\") + # beautiful colors\n  theme_void()\n```\n\n::: {.cell-output-display}\n![](cartogram_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "cartogram_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}