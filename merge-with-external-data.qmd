# Merge Shapefiles With External Data {#sec-merging}

## Introduction

A common task in mapping is that we have a *shapefile* (@sec-shapefiles) or `sf` object (@sec-sf) of map data, but we want to merge in some *external data* from another source so that we can map that *external data*.

Often we want to use different colors to map that external data (@sec-symbology).

Here, I use an `sf` object (@sec-sf) of countries of the world (@sec-rnaturalearth), and merge that data with data from the World Bank World Development Indicators (@sec-WDI).

This tutorial builds upon another tutorial on Mapping with `ggplot`(@sec-ggplot-map)

## Call Libraries

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| message: false

library(rnaturalearth) # natural earth data

library(sf) # simple (spatial) features

library(ggplot2) # beautiful plots

library(dplyr) # data wrangling and joins

```

## Get Map Data on Countries of the World

I am using the `rnaturalearth` package to get map data on countries of the world. I read this data into an object called `world`.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

mapdata <- ne_countries(scale = "medium", # medium scale
                        returnclass = "sf") # as sf object

```

## Make a Map Without Data

I map the data with `ggplot`, and the special `geom`, `geom_sf`.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(mapdata) + 
  geom_sf() +
  labs(title = "Demonstration Map With No Data")

```

## Get External Data

Here I load the World Bank Data (@sec-WDI).

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| message: false

load("WorldBankData.Rdata")

head(WorldBankData) # replay data set

```

## Join Data to Shapefile

I use `left_join` from the `dplyr` package to merge the spatial data in `world` with `externaldata`. 

`left_join` is a function that keeps all observations in the data on the left (the shapefile), and only those matching observations in the data on the right (the external data), which is usually what I want in mapping.

I need a unique identifier for my rows of data, so here I use `iso_a3`, a unique 3 letter identifier for countries of the world.

First I need to make a copy of a variable in `WorldBankData` with a new name so that the identifiers will match exactly.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

WorldBankData$iso_a3 <- WorldBankData$iso3c 

```

Then I merge the data using `left_join`.
 
```{r}
#| code-fold: true
#| code-summary: "Show the code"

newdata <- left_join(mapdata, # map data
                     WorldBankData, # table of indicators
                     by = "iso_a3") # join by

```

## Make a Map With The Data

Once I have the merged data, it is easy to map it with `ggplot` and `geom_sf`. Note that I need to specify an `aes`thetic for `geom_sf`. Here `GDP` is the *fill* color for countries on the map.

> Data could also be mapped with another package like `leaflet` (@sec-leaflet).

```{r}
#| code-fold: true
#| code-summary: "Show the code"

ggplot(newdata) +
  geom_sf(aes(fill = GDP)) + # adding a fill aesthetic
  scale_fill_viridis_c(na.value = "grey97", # value for NA
                       option = "viridis") + # viridis colors
  labs(title = "Demonstration Map With Merged Data") +
  theme_minimal() # better theme

```



