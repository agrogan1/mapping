# Map Projections {#sec-projections}

Map projections exist because we are trying to take the round globe of the earth, and project it onto a 2 dimensional surface. Because a spherical globe can not be projected onto a flat surface without *some* distortion, different projections make different choices about the kind of distortion involved.

```{r}
#| echo: false
#| message: false
#| fig-cap: "A Globe And A Flat Map"
#| label: globe-and-flat-map

library(plotly)

mymap <- plot_geo() %>%
  layout(geo = list(showland = TRUE, # show land
                    landcolor = toRGB("darkgrey"), # land color
                    showcountries = TRUE, # show countries
                    showocean = FALSE, # show ocean
                    oceancolor = "lightblue", # ocean color
                    lataxis = list(showgrid = TRUE, # latitude options
                                   gridcolor = toRGB("grey")),
                    lonaxis = list(showgrid = TRUE, # longitude options
                                   gridcolor = toRGB("grey")))) 

# mymap # replay

myglobe <- mymap %>% 
  layout(geo = list(projection = list(type = 'orthographic')))

# myglobe # replay

subplot(myglobe, mymap, 
        widths = c(0.3, 0.7)) %>% 
  layout(title = 'A Globe And A Flat Map')

```

::: {.callout-note}
This chapter is mostly a conceptual overview, and not code-focused. However, the code is provided for the sake of transparency and teaching. It is not necessary to understand the code here. But I learned a lot from: [https://plotly.com/r/#maps](https://plotly.com/r/#maps).
:::

## Set Up The Map

## Call `plotly` Library

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| output: false

library(plotly)

```

## A Basic Map

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| message: false

# a very basic map could be created with: 

library(plotly)

mymap0 <- plot_geo() # create basic map; read into mymap0

mymap0 # replay

```

## A More Advanced Map

::: {.callout-note collapse="false"}
Again, it is not necessary to understand the code to understand the conceptual ideas of this chapter. The code below--especially the first code chunk--is admittedly a little complicated, mostly because I added options to get the map to look exactly the way that I wanted. 
:::

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| message: false

mymap <- plot_geo() %>%
  layout(title = "Demonstration Map", 
         geo = list(showland = TRUE, # show land
                    landcolor = toRGB("darkgrey"), # land color
                    showcountries = TRUE, # show countries
                    showocean = FALSE, # show ocean
                    oceancolor = "lightblue", # ocean color
                    lataxis = list(showgrid = TRUE, # latitude options
                                   gridcolor = toRGB("grey")),
                    lonaxis = list(showgrid = TRUE, # longitude options
                                   gridcolor = toRGB("grey")))) 

mymap # replay

```

## Map Projections

### Globe (Orthographic)

> An *orthographic* projection reprsents the globe with 3 dimensional accuracy.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| message: false

mymap %>% 
  layout(geo = list(projection = list(type = 'orthographic')))

```

### Mercator 

> A *Mercator* projection reprsents the earth with perpendicular latitude and longitude. This projection can be helpful in some kinds of navigation, but areas of landmasses are distorted, especially as one approaches the poles.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| message: false

mymap %>% 
  layout(geo=list(projection = list(type = 'mercator')))

```

### Mollweide

> The *Mollweide* projection is an *equal area* projection. As a consequence, latitude and longitude lines are not perpendicular, and the shapes of some landmasses may appear to be distorted.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| message: false

mymap %>% 
  layout(geo=list(projection = list(type = 'mollweide')))

```

### Robinson

> The *Robinson* projection is an attempt to compromise between equal areas and a natural looking map.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| message: false

mymap %>% 
  layout(geo=list(projection = list(type = 'robinson')))

```







