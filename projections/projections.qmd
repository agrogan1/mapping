---
title: "Map Projections"
author: "Andy Grogan-Kaylor"
date: "today"
format:
  html:
    toc: true
    number-sections: true
    code-fold: true
    code-summary: "Show the code"
    theme:
      light: united
      dark: vapor
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = TRUE,
                      warning = FALSE,
                      message = FALSE)

```

```{css, echo=FALSE}

blockquote {
  color: black;
  border-left: 2px solid #FFCB05; 
  padding: 0.5em 10px;
}
  
```

# Set Up The Map

> It is not necessary to understand the code here. But I learned a lot from: [https://plotly.com/r/#maps](https://plotly.com/r/#maps).

## Call `plotly` Library

```{r}

library(plotly)

```

## A Basic Map

```{r, echo=TRUE, eval=TRUE}

# a very basic map could be created with: 

library(plotly)

mymap0 <- plot_geo()

mymap0 # replay

```

## A More Advanced Map

> This part is admittedly a little complicated, mostly because I added options to get the map to look exactly the way that I wanted. 

```{r}

mymap <- plot_geo() %>%
  layout(title = "Demonstration Map", 
         geo = list(showland = TRUE, # show land
                    landcolor = toRGB("grey"), # land color
                    showcountries = TRUE, # show countries
                    showocean = FALSE, # show ocean
                    oceancolor = "lightblue", # ocean color
                    lataxis = list(showgrid = TRUE, # latitude options
                                   gridcolor = toRGB("black")),
                    lonaxis = list(showgrid = TRUE, # longitude options
                                   gridcolor = toRGB("black")))) 

mymap # replay

```

# Map Projections

## Globe (Orthographic)

```{r}

mymap %>% 
  layout(geo = list(projection = list(type = 'orthographic')))

```

## Mercator 

> Perpendicular latitude and longitude. Can be helpful in some kinds of navigation, but areas are distorted, especially as one approaches the poles.

```{r}

mymap %>% 
  layout(geo=list(projection = list(type = 'mercator')))

```

## Mollweide

> An *equal area* projection.

```{r}

mymap %>% 
  layout(geo=list(projection = list(type = 'mollweide')))

```

## Robinson

> An attempt to compromise between equal areas and a natural looking map.

```{r}

mymap %>% 
  layout(geo=list(projection = list(type = 'robinson')))

```


