# Symbology

## Introduction

Shapefiles (@sec-shapefiles) are a standard format for storing geographic data. 

Shapefiles generally come in three types: points <span style="color:red">●</span>; lines <span style="color:red;font-size:2em">━</span>; and polygons <span style="color:red;font-size:3em">▭▯</span>. 

# Symbology

*Symbology* is the idea of using shapefile attributes to encode *quantitative* or *qualitative* information, such as income or program participation.

::: {.panel-tabset}

## Symbology

| Shapefile Type | Symbology|
|----------------|----------|
| Points         | Size: ● <span style="font-size:2em">●</span> <span style="font-size:3em">●</span>|  
|                | Color: <span style="color:red">●</span> <span style="color:blue">●</span> <span style="color:green">●</span>|
| Lines          | Width: ━ <span style="font-size:2em">━</span> <span style="font-size:5em">━</span>|
|                | Color: <span style="color:red;font-size:3em">━</span> <span style="color:blue;font-size:3em">━</span> <span style="color:green;font-size:3em">━</span> |
|                | Pattern: <span style="font-size:3em">━ ┅</span> | 
| Polygons       | Color: <span style="color:red;font-size:3em">■</span> <span style="color:blue;font-size:3em">■</span> <span style="color:green;font-size:3em">■</span> |
|                | Pattern: <span style="font-size:3em">■ ▤ ▦</span>

: Symbology


## A Note About the Use of Color

Color palettes can be either qualitative or quantitative in nature. 

::: {.callout-note}
The code used to generate these color palettes is shown for reference, but may not be the exact code needed when these colors are used in maps.
:::


### Base R

```{r}
#| fig.cap: "Heatmap Colors"
#| fig.height: 3
#| code-fold: true 
#| code-summary: "Show the code"

barplot(rep(1,10), col = heat.colors(10), axes = FALSE)

```

```{r}
#| fig.cap: "Topographical Colors"
#| fig.height: 3
#| code-fold: true 
#| code-summary: "Show the code"

barplot(rep(1,10), col = topo.colors(10), axes = FALSE)

```

```{r}
#| fig.cap: "Terrain Colors"
#| fig.height: 3
#| code-fold: true 
#| code-summary: "Show the code"

barplot(rep(1,10), col = terrain.colors(10), axes = FALSE)

```


### RColorBrewer

```{r}
#| code-fold: true 
#| code-summary: "Show the code"

library(RColorBrewer) # A library for color palettes

```

```{r}
#| fig.cap: "Blues Palette"
#| fig.height: 3
#| code-fold: true 
#| code-summary: "Show the code"

display.brewer.pal(name = "Blues", n = 9)

```

```{r}
#| fig.cap: "Spectral Palette"
#| fig.height: 3
#| code-fold: true 
#| code-summary: "Show the code"

display.brewer.pal(name = "Spectral", n = 9)

```

```{r}
#| fig.cap: "Set1 Palette"
#| fig.height: 3
#| code-fold: true 
#| code-summary: "Show the code"

display.brewer.pal(name = "Set1", n = 9)

```

### Viridis

More details can be found at [https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)

```{r}
#| code-fold: true 
#| code-summary: "Show the code"

library(scales)

```

```{r}
#| code-fold: true 
#| code-summary: "Show the code"

show_col(viridis_pal()(9), 
         ncol = 9, # 9 columns
         labels = FALSE) # no labels 

```


:::

# Demonstration Map

```{r}
#| message: false
#| code-fold: true 
#| code-summary: "Show the code"

library(ggplot2) # graphing and mapping

library(sf) # simple features

city_boundary <- read_sf("./shapefiles/AA_City_Boundary/AA_City_Boundary.shp")

clients <- read_sf("./shapefiles/clients/clients.shp")

ggplot(city_boundary) +
  geom_sf(color = "darkgrey", alpha = .5) +
  geom_sf(data = clients,
          aes(color = program), # color = program
          size = 3, # size
          alpha = .75) + # transparency
  labs(title = "Ann Arbor",
       subtitle = "Locations of Simulated Clients",
       caption = "Point Color Indicates Program") +
  scale_color_viridis_d(name="Program") + # nice viridis colors
  theme_minimal() +
  theme(plot.title = element_text(size = rel(2)), 
        axis.text = element_text(size = rel(.5)),
        legend.position = "bottom") 


```








