# Cartogram

A *cartogram* is a map where the areas of different regions are distorted (increased in size; decreased in size) by the value of some quantitative variable.

## Call Libraries

```{r}
#| output: false
#| code-fold: true

library(rnaturalearth) # natural earth data

library(ggplot2) # beautiful maps

library(dplyr) # data wrangling

library(sf) # simple (spatial) features

library(cartogram) # cartograms!

```

## Remove Scientific Notation

```{r}
#| code-fold: true

options(scipen = 999) # high 'penalty' for scientific notation

```

## Get Map Data From `rnaturalearth`

```{r}
#| code-fold: true

mapdata <- ne_countries(scale = "medium", # medium scale
                        returnclass = "sf")  # as sf object
  
```

## Make A Basic Map

We make a basic map, reading it into an object called `mymap.` We then *replay* `mymap.`

```{r}
#| code-fold: true

mymap <- ggplot(mapdata) + # the data I am mapping
  geom_sf() # the geometry I am using

mymap # replay my map

```

## Make And Plot The Cartogram

### Project The Cartogram Data

::: {.callout-tip}
`cartogram` requires *projected* data (@sec-projections), so we need to project the data with `st_transform`. A number of projections, including the *Mercator* and *Mollweide* projections are possibilities. You may need to experiment with a number of projections to see which ones work best in any particular cartogram.
:::

```{r}
#| code-fold: true

# mapdata_proj <- st_transform(mapdata, 
#                              3857) # Mercator

mapdata_proj <- st_transform(mapdata, 
                             crs = "+proj=moll") # Mollweide
```

### Plot The Projected Data

```{r}
#| code-fold: true

ggplot(mapdata_proj) + 
  geom_sf() # plot projected data

```
### Make The Cartogram Data

::: {.callout-tip}
Each iteration takes a **LONG** time. Fewer iterations help the time, but each iteration contributes to the *distortion*, and makes a more `cartogram`-like *cartogram*. Because this is the most time intensive step, I time the creation of the cartogram with `Sys.time`.
:::

```{r}
#| code-fold: true
#| label: makecartogram

start_time <- Sys.time() # time this step

mapdata_cartogram <- cartogram_cont(mapdata_proj, 
                                  "pop_est", 
                                  itermax = 7)

end_time <- Sys.time()

end_time - start_time

```

### Basic Cartogram

```{r}
#| code-fold: true

ggplot(mapdata_cartogram) + 
  geom_sf()

```

::: {.callout-tip}
### Why Does Antarctica Look So Strange? How To Fix This?

In some projections, especially the Mercator projection, Antartica looks strange in the cartogram.

The key is to run this `dplyr` code to remove Antarctica.

```{r}
#| eval: true
#| code-fold: true

mapdata_cartogram <- mapdata_cartogram %>% 
  dplyr::filter(! continent == "Antarctica")

```
:::

### Basic Cartogram

```{r}
#| code-fold: true

ggplot(mapdata_cartogram) + 
  geom_sf(aes(fill = pop_est)) + # fill is population estimate
  theme_void()

```

### Cartogram With Better (`viridis`) Colors

```{r}
#| code-fold: true

ggplot(mapdata_cartogram) + 
  geom_sf(aes(fill = pop_est)) + # fill is population estimate
  scale_fill_viridis_c(name = "population",
                       option = "turbo") + # beautiful colors
  theme_void()

```


